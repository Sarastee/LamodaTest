// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: warehouse.proto

package warehouse_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WarehouseV1Client is the client API for WarehouseV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WarehouseV1Client interface {
	ReserveProducts(ctx context.Context, in *ReserveProductsRequest, opts ...grpc.CallOption) (*ReserveProductsResponse, error)
	UndoReserveProducts(ctx context.Context, in *UndoReserveProductsRequest, opts ...grpc.CallOption) (*UndoReserveProductsResponse, error)
	ReleaseReserve(ctx context.Context, in *ReleaseReserveRequest, opts ...grpc.CallOption) (*ReleaseReserveResponse, error)
	GetRemainingProducts(ctx context.Context, in *GetRemainingProductsRequest, opts ...grpc.CallOption) (*GetRemainingProductsResponse, error)
}

type warehouseV1Client struct {
	cc grpc.ClientConnInterface
}

func NewWarehouseV1Client(cc grpc.ClientConnInterface) WarehouseV1Client {
	return &warehouseV1Client{cc}
}

func (c *warehouseV1Client) ReserveProducts(ctx context.Context, in *ReserveProductsRequest, opts ...grpc.CallOption) (*ReserveProductsResponse, error) {
	out := new(ReserveProductsResponse)
	err := c.cc.Invoke(ctx, "/warehouse_v1.WarehouseV1/ReserveProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseV1Client) UndoReserveProducts(ctx context.Context, in *UndoReserveProductsRequest, opts ...grpc.CallOption) (*UndoReserveProductsResponse, error) {
	out := new(UndoReserveProductsResponse)
	err := c.cc.Invoke(ctx, "/warehouse_v1.WarehouseV1/UndoReserveProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseV1Client) ReleaseReserve(ctx context.Context, in *ReleaseReserveRequest, opts ...grpc.CallOption) (*ReleaseReserveResponse, error) {
	out := new(ReleaseReserveResponse)
	err := c.cc.Invoke(ctx, "/warehouse_v1.WarehouseV1/ReleaseReserve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseV1Client) GetRemainingProducts(ctx context.Context, in *GetRemainingProductsRequest, opts ...grpc.CallOption) (*GetRemainingProductsResponse, error) {
	out := new(GetRemainingProductsResponse)
	err := c.cc.Invoke(ctx, "/warehouse_v1.WarehouseV1/GetRemainingProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WarehouseV1Server is the server API for WarehouseV1 service.
// All implementations must embed UnimplementedWarehouseV1Server
// for forward compatibility
type WarehouseV1Server interface {
	ReserveProducts(context.Context, *ReserveProductsRequest) (*ReserveProductsResponse, error)
	UndoReserveProducts(context.Context, *UndoReserveProductsRequest) (*UndoReserveProductsResponse, error)
	ReleaseReserve(context.Context, *ReleaseReserveRequest) (*ReleaseReserveResponse, error)
	GetRemainingProducts(context.Context, *GetRemainingProductsRequest) (*GetRemainingProductsResponse, error)
	mustEmbedUnimplementedWarehouseV1Server()
}

// UnimplementedWarehouseV1Server must be embedded to have forward compatible implementations.
type UnimplementedWarehouseV1Server struct {
}

func (UnimplementedWarehouseV1Server) ReserveProducts(context.Context, *ReserveProductsRequest) (*ReserveProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveProducts not implemented")
}
func (UnimplementedWarehouseV1Server) UndoReserveProducts(context.Context, *UndoReserveProductsRequest) (*UndoReserveProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndoReserveProducts not implemented")
}
func (UnimplementedWarehouseV1Server) ReleaseReserve(context.Context, *ReleaseReserveRequest) (*ReleaseReserveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseReserve not implemented")
}
func (UnimplementedWarehouseV1Server) GetRemainingProducts(context.Context, *GetRemainingProductsRequest) (*GetRemainingProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRemainingProducts not implemented")
}
func (UnimplementedWarehouseV1Server) mustEmbedUnimplementedWarehouseV1Server() {}

// UnsafeWarehouseV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WarehouseV1Server will
// result in compilation errors.
type UnsafeWarehouseV1Server interface {
	mustEmbedUnimplementedWarehouseV1Server()
}

func RegisterWarehouseV1Server(s grpc.ServiceRegistrar, srv WarehouseV1Server) {
	s.RegisterService(&WarehouseV1_ServiceDesc, srv)
}

func _WarehouseV1_ReserveProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseV1Server).ReserveProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warehouse_v1.WarehouseV1/ReserveProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseV1Server).ReserveProducts(ctx, req.(*ReserveProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseV1_UndoReserveProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndoReserveProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseV1Server).UndoReserveProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warehouse_v1.WarehouseV1/UndoReserveProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseV1Server).UndoReserveProducts(ctx, req.(*UndoReserveProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseV1_ReleaseReserve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseReserveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseV1Server).ReleaseReserve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warehouse_v1.WarehouseV1/ReleaseReserve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseV1Server).ReleaseReserve(ctx, req.(*ReleaseReserveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseV1_GetRemainingProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRemainingProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseV1Server).GetRemainingProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warehouse_v1.WarehouseV1/GetRemainingProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseV1Server).GetRemainingProducts(ctx, req.(*GetRemainingProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WarehouseV1_ServiceDesc is the grpc.ServiceDesc for WarehouseV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WarehouseV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "warehouse_v1.WarehouseV1",
	HandlerType: (*WarehouseV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReserveProducts",
			Handler:    _WarehouseV1_ReserveProducts_Handler,
		},
		{
			MethodName: "UndoReserveProducts",
			Handler:    _WarehouseV1_UndoReserveProducts_Handler,
		},
		{
			MethodName: "ReleaseReserve",
			Handler:    _WarehouseV1_ReleaseReserve_Handler,
		},
		{
			MethodName: "GetRemainingProducts",
			Handler:    _WarehouseV1_GetRemainingProducts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "warehouse.proto",
}
